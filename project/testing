 [{'file_no': 1, 'filename': 'widget_test.dart', 'extension_type': '.dart', 'code': "// This is a basic Flutter widget test.\n//\n// To perform an interaction with a widget in your test, use the WidgetTester\n// utility that Flutter provides. For example, you can send tap and scroll\n// gestures. You can also use WidgetTester to find child widgets in the widget\n// tree, read text, and verify that the values of widget properties are correct.\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:food_delivery_app/main.dart';\n\nvoid main() {\n  testWidgets('Counter increments smoke test', (WidgetTester tester) async {\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(MyApp());\n\n    // Verify that our counter starts at 0.\n    expect(find.text('0'), findsOneWidget);\n    expect(find.text('1'), findsNothing);\n\n    // Tap the '+' icon and trigger a frame.\n    await tester.tap(find.byIcon(Icons.add));\n    await tester.pump();\n\n    // Verify that our counter has incremented.\n    expect(find.text('0'), findsNothing);\n    expect(find.text('1'), findsOneWidget);\n  });\n}\n"}, {'file_no': 2, 'filename': 'firebase_helper.dart', 'extension_type': '.dart', 'code': '\n\nimport \'package:firebase_auth/firebase_auth.dart\';\nimport \'package:firebase_database/firebase_database.dart\';\nimport \'package:food_delivery_app/models/category_model.dart\';\nimport \'package:food_delivery_app/models/food_model.dart\';\nimport \'package:food_delivery_app/models/request_model.dart\';\nimport \'package:food_delivery_app/resourese/auth_methods.dart\';\nimport \'package:food_delivery_app/resourese/databaseSQL.dart\';\n\nclass FirebaseHelper {\n  // Firebase Database, will use to get reference.\n  static final FirebaseDatabase _database = FirebaseDatabase.instance;\n\n  static final DatabaseReference _ordersReference =\n      _database.reference().child("Orders");\n  static final DatabaseReference _categoryReference =\n      _database.reference().child("Category");\n  static final DatabaseReference _foodReference =\n      _database.reference().child("Foods");\n\n  // fetch all foods list from food reference\n  Future<List<FoodModel>> fetchAllFood() async {\n    List<FoodModel> foodList = <FoodModel>[];\n    DatabaseReference foodReference = _database.ref().child("Foods");\n    DatabaseEvent event = await foodReference.once();\n    event.snapshot.children.forEach((DataSnapshot element) {\n      if (element.value is Map) {\n        FoodModel food =\n            FoodModel.fromMap(element.value as Map<dynamic, dynamic>);\n        foodList.add(food);\n      }\n    });\n    return foodList;\n  }\n\n  // fetch food list with query string\n  Future<List<FoodModel>> fetchSpecifiedFoods(String queryStr) async {\n    List<FoodModel> foodList = <FoodModel>[];\n\n    DatabaseReference foodReference = _database.ref().child("Foods");\n    DatabaseEvent event = await foodReference.once();\n    event.snapshot.children.forEach((DataSnapshot element) {\n      if (element.value is Map) {\n        FoodModel food =\n            FoodModel.fromMap(element.value as Map<dynamic, dynamic>);\n        if (food.menuId == queryStr) {\n          foodList.add(food);\n        }\n      }\n    });\n    return foodList;\n  }\n\n  Future<bool> placeOrder(RequestModel request) async {\n    await _ordersReference\n        .child(request.uid)\n        .push()\n        .set(request.toMap(request));\n    return true;\n  }\n\n  Future<List<CategoryModel>> fetchCategory() async {\n    List<CategoryModel> categoryList = [];\n    DatabaseEvent event = await _categoryReference.once();\n    event.snapshot.children.forEach((DataSnapshot element) {\n      if (element.value is Map) {\n        Map e = element.value as Map<dynamic, dynamic>;\n        // TODO: use keyname in lowercase\n        CategoryModel category =\n            CategoryModel(image: e[\'Image\'], name: e[\'Name\'], keys: e[\'keys\']);\n        categoryList.add(category);\n      }\n    });\n\n    return categoryList;\n  }\n\n  Future<List<RequestModel>> fetchOrders(User currentUser) async {\n    List<RequestModel> requestList = [];\n    DatabaseReference foodReference = _ordersReference.child(currentUser.uid);\n\n    DatabaseEvent event = await foodReference.once();\n    event.snapshot.children.forEach((DataSnapshot element) {\n      if (element.value is Map) {\n        Map e = element.value as Map<dynamic, dynamic>;\n        // TODO: can use fromMap() method\n        RequestModel request = RequestModel(\n            address: e[\'address\'],\n            name: e[\'name\'],\n            uid: e[\'uid\'],\n            status: e[\'status\'],\n            total: e[\'total\'],\n            foodList: e[\'foodList\']);\n        requestList.add(request);\n      }\n    });\n\n    return requestList;\n  }\n\n  Future<void> addOrder(String totalPrice, List<FoodModel> orderedFoodList,\n      String name, String address) async {\n    // getter user details\n    User? user = await AuthMethods().getCurrentUser();\n    if (user == null) {\n      return;\n    }\n    String uidtxt = user.uid;\n    String statustxt = "0";\n    String totaltxt = totalPrice.toString();\n\n    // creating model of list of ordered foods\n    Map aux = new Map<String, dynamic>();\n    orderedFoodList.forEach((food) {\n      aux[food.keys] = food.toMap(food);\n    });\n\n    RequestModel request = new RequestModel(\n        address: address,\n        name: name,\n        uid: uidtxt,\n        status: statustxt,\n        total: totaltxt,\n        foodList: aux);\n\n    // add order to database\n    await _ordersReference\n        .child(request.uid)\n        .push()\n        .set(request.toMap(request))\n        .then((value) async {\n      // delete cart data\n      DatabaseSql databaseSql = DatabaseSql();\n      await databaseSql.openDatabaseSql();\n      await databaseSql.deleteAllData();\n    });\n  }\n}\n'}]